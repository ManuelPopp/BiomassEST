{
    "collab_server" : "",
    "contents" : "est.bm <- function(Species, RCD = NA, BHD = NA, H = NA, use = NA, H_meas = NA){\n  if(all(is.na(RCD)) & !anyNA(BHD) & !anyNA(H_meas)){\n    RCD <- BHD\n  }\n  # Check if at least some parameters were provided\n  if(all(is.na(RCD)) & all(is.na(BHD)) & all(is.na(H))){\n    warning(\"No parameters set. Provide at least one (ore more) of the following: RCD or BHD including H_meas, H.\")\n  }\n  # Error if neither H nor H_meas is provided\n  if(all(is.na(H)) & !is.numeric(H_meas)){\n    warning(\"Parameter H_meas not set. Please provide the height of your measurement.\")\n  }\n  # See if RCD is provided in some cases without H_meas, but H is provided (-> estimate biomass only based on H in this case)\n  if(!anyNA(use)){\n    if(all(is.na(H_meas)) & !anyNA(H) & !all(is.na(RCD)) & !all(use == \"H\")){\n      warning(\"RCD provided but H_meas missing. Calculating based on H.\")\n      use <- rep(\"H\", length(Species))\n    }\n  }else{\n    if(all(is.na(H_meas)) & !anyNA(H) & !all(is.na(RCD))){\n      warning(\"RCD provided but H_meas missing. Calculating based on H.\")\n      use <- rep(\"H\", length(Species))\n    }\n  }\n  # Set use to opportunistic if no argument was set (estimate biomass utilising as many as possible of the given values)\n  if(all(is.na(use))){\n    use <- \"opportunistic\"\n  }\n  # If RCD is provided and H is missing or RCD was set explicitly: Estimate biomass based on RCD\n  if(is.numeric(RCD) & !is.numeric(H) | is.numeric(RCD) & all(use == \"RCD\")){\n    # Warning if H_meas is missing\n    if(anyNA(H_meas)){\n      warning(\"Mode RCD (explicitly set or no H provided) missing value: H_meas\")\n    }\n    # Use H_meas for all instances in case only a single value (rather than a multi value vector) was provided\n    if(length(Species) > 1 & length(H_meas) == 1){\n      H_meas <- rep(H_meas, length(Species))\n    }\n    # Apply est.bm.RCD to all values\n    AGB <- mapply(FUN = BiomassEST::est.bm.RCD, Species = Species, RCD = RCD, H_meas = H_meas)\n  # If H is provided and RCD is missing or use of H was set explicitly: Estimate biomass based on H\n  }else if(is.numeric(H) & !is.numeric(RCD) | is.numeric(H) & all(use == \"H\")){\n    AGB <- mapply(FUN = BiomassEST::est.bm.H, Species = Species, H = H)\n  # If both, RCD and H are provided in at least some cases...\n  }else if(is.numeric(RCD) & is.numeric(H)){\n    # ...set H_meas for all instances if only provided once\n    if(length(Species) > 1 & length(H_meas) == 1){\n      H_meas <- rep(H_meas, length(Species))\n    }\n    # ...use RCD2H if all required values are provided without missing values\n    if(!anyNA(RCD) & !anyNA(H) & !anyNA(H_meas) & all(use == \"opportunistic\") | all(use == \"RCD2H\")){\n      AGB <- mapply(FUN = BiomassEST::est.bm.RCD2H, Species = Species, RCD = RCD, H = H, H_meas = H_meas)\n    # ...or print a warning, in case some values are missing\n    }else if(any(anyNA(RCD), anyNA(H), anyNA(H_meas)) & all(use == \"opportunistic\") | all(use == \"RCD2H\")){\n      warning(\"Data contains NA.\")\n      AGB <- NA\n    # In case use was set to different values for each instance, use a loop\n    }else if(!all(use == \"opportunistic\") & !all(use == \"RCD2H\")){\n      AGB <- vector()\n      for(i in 1:length(Species)){\n        if(use[i] == \"RCD\"){\n          AGB[i] <- BiomassEST::est.bm.RCD(Species = Species[i], RCD = RCD[i], H_meas = H_meas[i])\n        }else if(use[i] == \"H\"){\n          AGB[i] <- BiomassEST::est.bm.H(Species = Species[i], H = H[i])\n        }else if(is.na(use[i]) | use == \"RCD2H\"){\n          AGB[i] <- BiomassEST::est.bm.RCD2H(Species = Species[i], RCD = RCD[i], H = H[i], H_meas = H_meas[i])\n        }\n      }\n    }\n  }\n  return(AGB)\n}\n",
    "created" : 1622878096694.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4054006169",
    "id" : "38475487",
    "lastKnownWriteTime" : 1622884707,
    "last_content_update" : 1622884707435,
    "path" : "D:/Dateien/Studium_KIT/Master_GOEK/10_FS_Geooekologie/BiomassEST/R/est_bm.R",
    "project_path" : "R/est_bm.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}