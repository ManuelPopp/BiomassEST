Conifers <- read_excel(dat, sheet = "Conifers")
Conifers <- as.data.frame(Conifers)
for(i in 1:nrow(Citations)){
Citations$Bibtex[i] <- gsub("\\n", "\n", Citations$Bibtex[i])
}
usethis::use_data(Parameters_RCD, Parameters_H, Parameters_RCD2H,
Citations, Corrections, Conifers,
internal = TRUE, overwrite = TRUE)
library(BiomassEST)
library("readxl")
dat <- "C:/Users/Manuel/Nextcloud/Geobotanik/dat/Biomass_estimation.xlsx"
Parameters_RCD <- read_excel(dat, sheet = "Parameters_RCD")
Parameters_RCD <- as.data.frame(Parameters_RCD)
Parameters_H <- read_excel(dat, sheet = "Parameters_H")
Parameters_H <- as.data.frame(Parameters_H)
Parameters_RCD2H <- read_excel(dat, sheet = "Parameters_RCD2H")
Parameters_RCD2H <- as.data.frame(Parameters_RCD2H)
Citations <- read_excel(dat, sheet = "Citations")
Citations <- as.data.frame(Citations)
Corrections <- read_excel(dat, sheet = "Corrections")
Corrections <- as.data.frame(Corrections)
Conifers <- read_excel(dat, sheet = "Conifers")
Conifers <- as.data.frame(Conifers)
for(i in 1:nrow(Citations)){
Citations$Bibtex[i] <- gsub("\\n", "\n", Citations$Bibtex[i])
}
usethis::use_data(Parameters_RCD, Parameters_H, Parameters_RCD2H,
Citations, Corrections, Conifers,
internal = TRUE, overwrite = TRUE)
library(BiomassEST)
class(TRUE)
library("readxl")
dat <- "C:/Users/Manuel/Nextcloud/Geobotanik/dat/Biomass_estimation.xlsx"
Parameters_RCD <- read_excel(dat, sheet = "Parameters_RCD")
Parameters_RCD <- as.data.frame(Parameters_RCD)
Parameters_H <- read_excel(dat, sheet = "Parameters_H")
Parameters_H <- as.data.frame(Parameters_H)
Parameters_RCD2H <- read_excel(dat, sheet = "Parameters_RCD2H")
Parameters_RCD2H <- as.data.frame(Parameters_RCD2H)
Citations <- read_excel(dat, sheet = "Citations")
Citations <- as.data.frame(Citations)
Corrections <- read_excel(dat, sheet = "Corrections")
Corrections <- as.data.frame(Corrections)
Conifers <- read_excel(dat, sheet = "Conifers")
Conifers <- as.data.frame(Conifers)
for(i in 1:nrow(Citations)){
Citations$Bibtex[i] <- gsub("\\n", "\n", Citations$Bibtex[i])
}
usethis::use_data(Parameters_RCD, Parameters_H, Parameters_RCD2H,
Citations, Corrections, Conifers,
internal = TRUE, overwrite = TRUE)
library(BiomassEST)
cite.datasource("Abies alba")
cite.datasource("Abies alba", Bibtex = FALSE)
library(BiomassEST)
BiomassEst.Info <- function(topic = NA){
if(is.na(topic)){
cat("BiomassEST is a package that provides functions to estimate the biomass of trees.\n",
"Run Info('Species') in order to view a list of supported species. For some functions, generic parameters might also be available. You can use 'Conifer' and 'Broadleaf' for species that fall into the respective class, but for which no specific parameters exist. However, note that generic parameters don't fit all species of the respective group equally well.\n"
)
}else if(topic == "Species"){
Supported_species <- unique(paste(Parameters_RCD$Genus, Parameters_RCD$Epithet))
return(Supported_species)
}
BiomassEst.Info(topic = "Species")
BiomassEst.Info <- function(topic = NA){
if(is.na(topic)){
cat("BiomassEST is a package that provides functions to estimate the biomass of trees.\n",
"Run Info('Species') in order to view a list of supported species. For some functions, generic parameters might also be available. You can use 'Conifer' and 'Broadleaf' for species that fall into the respective class, but for which no specific parameters exist. However, note that generic parameters don't fit all species of the respective group equally well.\n"
)
}else if(topic == "Species"){
Supported_species <- unique(paste(Parameters_RCD$Genus, Parameters_RCD$Epithet))
return(Supported_species)
}
BiomassEst.Info("Species")
cat("BiomassEST is a package that provides functions to estimate the biomass of trees.\n",
"Run Info('Species') in order to view a list of supported species. For some functions, generic parameters might also be available. You can use 'Conifer' and 'Broadleaf' for species that fall into the respective class, but for which no specific parameters exist. However, note that generic parameters don't fit all species of the respective group equally well.\n"
)
unique(paste(Parameters_RCD$Genus, Parameters_RCD$Epithet))
BiomassEst.Info <- function(topic = NA){
if(is.na(topic)){
cat("BiomassEST is a package that provides functions to estimate the biomass of trees.\n",
"Run Info('Species') in order to view a list of supported species. For some functions, generic parameters might also be available. You can use 'Conifer' and 'Broadleaf' for species that fall into the respective class, but for which no specific parameters exist. However, note that generic parameters don't fit all species of the respective group equally well.\n"
)
}else if(topic == "Species"){
Supported_species <- unique(paste(BiomassEST:::Parameters_RCD$Genus, BiomassEST:::Parameters_RCD$Epithet))
return(Supported_species)
}
BiomassEst.Info("Species")
library(BiomassEST)
est.bm("Abies", H = 10 )
est.bm("Abies", H_meas = 10, RCD = 40)
est.bm("Abies alba", H_meas = 10, RCD = 40)
remove.packages("BiomassEST")
require("devtools")
install_github("ManuelPopp/BiomassEST")
# Install/load packages
packages <- c("readxl", "dplyr", "ggplot2", "devtools")
for(i in 1:NROW(packages)){
if(!require(packages[i], character.only = TRUE)){
install.packages(packages[i])
library(packages[i], character.only = TRUE)
}
if(!require("BiomassEST", character.only = TRUE)){
install_github("ManuelPopp/BiomassEST")
library("BiomassEST", character.only = TRUE)
}
wd <- "/home/manuel/Nextcloud/Geobotanik"
# Read data
data_raw <- read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "IDENT")
names(data_raw) <- c("ID", "Plot", "N_Spec", "TreeNo", "Species", "RCD", "BHD", "H", "Notes")
specInfo <- read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "Species")
# Check for typos in species IDs
data_raw$Species[which(!(data_raw$Species %in% specInfo$ID))]
fullname <- function(SpeciesID){
return(specInfo[specInfo$ID == SpeciesID, "Species"])
}
# Remove NA rows
data <- data_raw[!(is.na(data_raw$RCD) & is.na(data_raw$BHD) & is.na(data_raw$H)),]
# Add full names
data$SpecName <- unlist(sapply(data$Species, FUN = fullname), use.names = FALSE)
# New column for species names to use in biomass estimation (names for which no parameters exist have to be replaced)
data$UseSpec <- strsplit(data$SpecName, "[ _]")[[1]][1]
data$UseSpec[data$SpecName %in% BiomassEst.Info("Species")] <- data$SpecName[data$SpecName %in% BiomassEst.Info("Species")]
data$H_measurement <- 10
RCDMISSING <- which(is.na(data$RCD))
data$Biomass <- est.bm(Species = data$UseSpec, RCD = data$RCD, H_meas = data$H_measurement, H = data$H)
data
# Install/load packages
packages <- c("readxl", "dplyr", "ggplot2", "devtools")
for(i in 1:NROW(packages)){
if(!require(packages[i], character.only = TRUE)){
install.packages(packages[i])
library(packages[i], character.only = TRUE)
}
if(!require("BiomassEST", character.only = TRUE)){
install_github("ManuelPopp/BiomassEST")
library("BiomassEST", character.only = TRUE)
}
wd <- "/home/manuel/Nextcloud/Geobotanik"
# Read data
data_raw <- as.data.frame(read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "IDENT"))
names(data_raw) <- c("ID", "Plot", "N_Spec", "TreeNo", "Species", "RCD", "BHD", "H", "Notes")
specInfo <- read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "Species")
# Check for typos in species IDs
data_raw$Species[which(!(data_raw$Species %in% specInfo$ID))]
fullname <- function(SpeciesID){
return(specInfo[specInfo$ID == SpeciesID, "Species"])
}
# Remove NA rows
data <- data_raw[!(is.na(data_raw$RCD) & is.na(data_raw$BHD) & is.na(data_raw$H)),]
# Add full names
data$SpecName <- unlist(sapply(data$Species, FUN = fullname), use.names = FALSE)
# New column for species names to use in biomass estimation (names for which no parameters exist have to be replaced)
data$UseSpec <- strsplit(data$SpecName, "[ _]")[[1]][1]
data$UseSpec[data$SpecName %in% BiomassEst.Info("Species")] <- data$SpecName[data$SpecName %in% BiomassEst.Info("Species")]
data$H_measurement <- 10
RCDMISSING <- which(is.na(data$RCD))
data$Biomass <- est.bm(Species = data$UseSpec, RCD = data$RCD, H_meas = data$H_measurement, H = data$H)
est.bm(Species = data$UseSpec[1], RCD = data$RCD[1], H_meas = data$H_measurement[1])
est.bm("Abies", RCD = 20, H_meas = 10)
data
data$RCD
which(is.na(data$RCD))
which(is.na(data$H_measurement))
data$Biomass <- est.bm(Species = data$UseSpec, RCD = data$RCD, H_meas = data$H_measurement)
data$Biomass
data
ggplot(data = data, aes(x = N_Spec, y = Biomass)) +
geom_point()
ggplot(data = data, aes(x = N_Spec, y = Biomass)) +
geom_boxplot()
ggplot(data = data, aes(group = N_Spec, y = Biomass)) +
geom_boxplot()
ggplot(data = data, aes(group = as.factor(N_Spec), y = Biomass)) +
geom_boxplot()
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot()
data
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(Category = data$Plot), FUN = sum)
plot_data
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(PlotNumber = data$Plot), FUN = sum)
plot_data
names(plot_data)[2]
names(plot_data)[2] <- "Biomass"
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(PlotNumber = data$Plot, N_Species = data$N_Spec), FUN = sum)
plot_data
names(plot_data)[ncol(plot_data)] <- "Biomass"
data
specInfo
specInfo <- as.data.frame(read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "Species"))
# Read data
data_raw <- as.data.frame(read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "IDENT"))
names(data_raw) <- c("ID", "Plot", "N_Spec", "TreeNo", "Species", "RCD", "BHD", "H", "Notes")
specInfo <- as.data.frame(read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "Species"))
# Check for typos in species IDs
data_raw$Species[which(!(data_raw$Species %in% specInfo$ID))]
# Add origin of the species
for(i in 1:nrow(data_raw)){
data_raw$Origin[i] <- specInfo$Origin[which(specInfo$ID == data_raw$Species[i])]
}
data_raw
fullname <- function(SpeciesID){
return(specInfo[specInfo$ID == SpeciesID, "Species"])
}
# Remove NA rows
data <- data_raw[!(is.na(data_raw$RCD) & is.na(data_raw$BHD) & is.na(data_raw$H)),]
# Add full names
data$SpecName <- unlist(sapply(data$Species, FUN = fullname), use.names = FALSE)
# New column for species names to use in biomass estimation (names for which no parameters exist have to be replaced)
data$UseSpec <- strsplit(data$SpecName, "[ _]")[[1]][1]
data$UseSpec[data$SpecName %in% BiomassEst.Info("Species")] <- data$SpecName[data$SpecName %in% BiomassEst.Info("Species")]
data$H_measurement <- 10
RCDMISSING <- which(is.na(data$RCD))
data$Biomass <- est.bm(Species = data$UseSpec, RCD = data$RCD, H_meas = data$H_measurement)
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(PlotNumber = data$Plot, N_Species = data$N_Spec, Origin), FUN = sum)
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(PlotNumber = data$Plot, N_Species = data$N_Spec, data$Origin), FUN = sum)
plot_data
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(PlotNumber = data$Plot, N_Species = data$N_Spec, Origin = data$Origin), FUN = sum)
plot_data
data$Origin
names(plot_data)[ncol(plot_data)] <- "Biomass"
plot_data
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Biomass in g") +
ylab("Number of species per plot")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g")
# Plotting style
theme_set(bw)
# Plotting style
theme_set("bw")
a
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g")
# Plotting style
theme_set(theme_bw())
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols)
cols <- c(
rgb(0, 150, 130, alpha = 254.99, maxColorValue = 255), #kit colour
rgb(70, 100, 170, alpha = 254.99, maxColorValue = 255), #kit blue
rgb(223, 155, 27, alpha = 254.99, maxColorValue = 255), #kit orange
rgb(140, 182, 60, alpha = 254.99, maxColorValue = 255), #kit Mai green
rgb(162, 34, 35, alpha = 254.99, maxColorValue = 255), #kit red
rgb(163, 16, 124, alpha = 254.99, maxColorValue = 255), #kit violet
rgb(167, 130, 46, alpha = 254.99, maxColorValue = 255) #kit braun
)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_fill_discrete(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(cols)
cols
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(cols) +
scale_fill_manual(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = Origin)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(cols) +
scale_fill_manual(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = Origin)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = N_Spec)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = as.factor(N_Spec))) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = as.factor(N_Spec))) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols) +
theme(legend = "None")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = as.factor(N_Spec))) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols) +
theme(legend = FALSE)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = as.factor(N_Spec))) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols) +
theme(legend. position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = as.factor(N_Spec))) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
scale_fill_manual(cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass, colour = as.factor(N_Spec))) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(cols) +
theme(legend.position = "none")
s.factor(N_Spec)
as.factor(N_Spec)
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass), colour = as.factor(N_Spec)) +
geom_boxplot() +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(values = cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_discrete(values = cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manuel(values = cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(values = cols) +
theme(legend.position = "none")
ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(values = cols) +
theme(legend.position = "none")
pdf(file = file.path(wd, "fig", "Boxplot.pdf"), width = 7, height = 5)
print(gg)
print(gg_0)
gg_0 <- ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(values = cols) +
theme(legend.position = "none")
print(gg_0)
dev.off()
# Install/load packages
packages <- c("readxl", "dplyr", "ggplot2", "devtools")
for(i in 1:NROW(packages)){
if(!require(packages[i], character.only = TRUE)){
install.packages(packages[i])
library(packages[i], character.only = TRUE)
}
if(!require("BiomassEST", character.only = TRUE)){
install_github("ManuelPopp/BiomassEST")
library("BiomassEST", character.only = TRUE)
}
wd <- "/home/manuel/Nextcloud/Geobotanik"
# Plotting style
theme_set(theme_bw())
cols <- c(
rgb(0, 150, 130, alpha = 254.99, maxColorValue = 255), #kit colour
rgb(70, 100, 170, alpha = 254.99, maxColorValue = 255), #kit blue
rgb(223, 155, 27, alpha = 254.99, maxColorValue = 255), #kit orange
rgb(140, 182, 60, alpha = 254.99, maxColorValue = 255), #kit Mai green
rgb(162, 34, 35, alpha = 254.99, maxColorValue = 255), #kit red
rgb(163, 16, 124, alpha = 254.99, maxColorValue = 255), #kit violet
rgb(167, 130, 46, alpha = 254.99, maxColorValue = 255) #kit braun
)
colz <- c(
rgb(0, 150, 130, alpha = 255*0.5, maxColorValue = 255), #kit colour
rgb(70, 100, 170, alpha = 255*0.5, maxColorValue = 255), #kit blue
rgb(223, 155, 27, alpha = 255*0.5, maxColorValue = 255), #kit orange
rgb(140, 182, 60, alpha = 255*0.5, maxColorValue = 255), #kit Mai green
rgb(162, 34, 35, alpha = 255*0.5, maxColorValue = 255), #kit red
rgb(163, 16, 124, alpha = 255*0.5, maxColorValue = 255), #kit violet
rgb(167, 130, 46, alpha = 255*0.5, maxColorValue = 255) #kit braun
)
# Read data
data_raw <- as.data.frame(read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "IDENT"))
names(data_raw) <- c("ID", "Plot", "N_Spec", "TreeNo", "Species", "RCD", "BHD", "H", "Notes")
specInfo <- as.data.frame(read_excel(file.path(wd, "dat", "Data_IDENT.xlsx"), sheet = "Species"))
# Check for typos in species IDs
data_raw$Species[which(!(data_raw$Species %in% specInfo$ID))]
# Add origin of the species
for(i in 1:nrow(data_raw)){
data_raw$Origin[i] <- specInfo$Origin[which(specInfo$ID == data_raw$Species[i])]
}
fullname <- function(SpeciesID){
return(specInfo[specInfo$ID == SpeciesID, "Species"])
}
# Remove NA rows
data <- data_raw[!(is.na(data_raw$RCD) & is.na(data_raw$BHD) & is.na(data_raw$H)),]
# Add full names
data$SpecName <- unlist(sapply(data$Species, FUN = fullname), use.names = FALSE)
# New column for species names to use in biomass estimation (names for which no parameters exist have to be replaced)
data$UseSpec <- strsplit(data$SpecName, "[ _]")[[1]][1]
data$UseSpec[data$SpecName %in% BiomassEst.Info("Species")] <- data$SpecName[data$SpecName %in% BiomassEst.Info("Species")]
data$H_measurement <- 10
RCDMISSING <- which(is.na(data$RCD))
data$Biomass <- est.bm(Species = data$UseSpec, RCD = data$RCD, H_meas = data$H_measurement)
# Summarise by plots
plot_data <- aggregate(data$Biomass, by = list(PlotNumber = data$Plot, N_Species = data$N_Spec, Origin = data$Origin), FUN = sum)
names(plot_data)[ncol(plot_data)] <- "Biomass"
gg_0 <- ggplot(data = data, aes(x = as.factor(N_Spec), y = Biomass)) +
geom_boxplot(aes(colour = as.factor(N_Spec))) +
facet_wrap(~Origin) +
xlab("Number of species per plot") +
ylab("Biomass in g") +
scale_color_manual(values = cols) +
theme(legend.position = "none")
pdf(file = file.path(wd, "fig", "Boxplot.pdf"), width = 7, height = 5)
print(gg_0)
dev.off()
